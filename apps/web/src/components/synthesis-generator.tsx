'use client'

import { useState } from 'react'
import { useSupabase } from '@/components/supabase-provider'
import { useUser } from '@/hooks/use-user'
import { Button, Card, CardContent, CardDescription, CardHeader, CardTitle, Label } from '@ltoc/ui'
import { AIServiceManager } from '@ltoc/utils'
import { ContentSelector } from '@/components/content-selector'
import { Loader2, Download, AlertCircle } from 'lucide-react'
import type { Content } from '@ltoc/database'

interface SynthesisGeneratorProps {
  contentCount: number
}

export function SynthesisGenerator({ contentCount }: SynthesisGeneratorProps) {
  const { supabase } = useSupabase()
  const { user } = useUser()
  
  const [selectedContent, setSelectedContent] = useState<string[]>([])
  const [synthesisLevel, setSynthesisLevel] = useState<'executive' | 'detailed' | 'comprehensive'>('executive')
  const [generating, setGenerating] = useState(false)
  const [synthesis, setSynthesis] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)

  const handleGenerateSynthesis = async () => {
    if (selectedContent.length === 0) {
      setError('Please select at least one content piece')
      return
    }

    setGenerating(true)
    setError(null)
    setSynthesis(null)

    try {
      // Fetch the selected content
      const { data: contents, error: fetchError } = await supabase
        .from('content')
        .select('*')
        .in('id', selectedContent)

      if (fetchError) throw fetchError

      // Initialize AI service
      const aiService = AIServiceManager.initFromEnv()
      
      // Generate synthesis
      const result = await aiService.generateSynthesis({
        contentIds: selectedContent,
        level: synthesisLevel,
        context: {
          maxTokens: synthesisLevel === 'executive' ? 500 : 
                     synthesisLevel === 'detailed' ? 1000 : 2000
        }
      })

      // Save to database
      const { data: savedSynthesis, error: saveError } = await supabase
        .from('ai_syntheses')
        .insert({
          organization_id: user?.organization_id,
          content_ids: selectedContent,
          synthesis_level: synthesisLevel,
          synthesis_text: result.synthesis,
          attributions: result.attributions,
          confidence_score: result.confidence,
          provider: result.metadata.provider,
          model_version: result.metadata.model,
          tokens_used: result.metadata.tokensUsed,
          cost_cents: result.metadata.costCents,
        })
        .select()
        .single()

      if (saveError) throw saveError

      setSynthesis({
        ...savedSynthesis,
        result
      })

    } catch (err: any) {
      console.error('Error generating synthesis:', err)
      setError(err.message || 'Failed to generate synthesis')
    } finally {
      setGenerating(false)
    }
  }

  const downloadSynthesis = () => {
    if (!synthesis) return

    const content = `
# AI-Generated Synthesis

Generated: ${new Date().toLocaleString()}
Level: ${synthesis.synthesis_level}
Confidence: ${Math.round(synthesis.result.confidence * 100)}%

## Synthesis

${synthesis.result.synthesis}

## Attributions

${synthesis.result.attributions.map((attr: any) => 
  `- ${attr.author}: ${attr.contribution} (${Math.round(attr.weight * 100)}%)`
).join('\n')}

## Identified Gaps

${synthesis.result.gaps.map((gap: any) => 
  `- ${gap.topic}: ${gap.description}`
).join('\n')}

---
Generated by Living Theory of Change Platform
    `.trim()

    const blob = new Blob([content], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `synthesis-${synthesis.synthesis_level}-${Date.now()}.md`
    a.click()
    URL.revokeObjectURL(url)
  }

  if (contentCount === 0) {
    return (
      <Card>
        <CardContent className="py-12 text-center">
          <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <p className="text-muted-foreground">
            No published content available for synthesis yet.
          </p>
          <p className="text-sm text-muted-foreground mt-2">
            Content needs to be reviewed and published before it can be synthesized.
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Generate New Synthesis</CardTitle>
          <CardDescription>
            Select content and synthesis parameters
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Content Selection</Label>
            <ContentSelector
              selectedIds={selectedContent}
              onSelectionChange={setSelectedContent}
            />
            <p className="text-xs text-muted-foreground">
              Selected: {selectedContent.length} content piece{selectedContent.length !== 1 ? 's' : ''}
            </p>
          </div>

          <div className="space-y-2">
            <Label>Synthesis Level</Label>
            <div className="grid grid-cols-3 gap-2">
              <Button
                type="button"
                variant={synthesisLevel === 'executive' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSynthesisLevel('executive')}
                disabled={generating}
              >
                Executive
              </Button>
              <Button
                type="button"
                variant={synthesisLevel === 'detailed' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSynthesisLevel('detailed')}
                disabled={generating}
              >
                Detailed
              </Button>
              <Button
                type="button"
                variant={synthesisLevel === 'comprehensive' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSynthesisLevel('comprehensive')}
                disabled={generating}
              >
                Comprehensive
              </Button>
            </div>
          </div>

          {error && (
            <div className="rounded-md bg-destructive/10 p-3 text-sm text-destructive">
              {error}
            </div>
          )}

          <Button
            onClick={handleGenerateSynthesis}
            disabled={generating || selectedContent.length === 0}
            className="w-full"
          >
            {generating && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Generate Synthesis
          </Button>
        </CardContent>
      </Card>

      {synthesis && (
        <Card>
          <CardHeader>
            <div className="flex items-start justify-between">
              <div>
                <CardTitle>Generated Synthesis</CardTitle>
                <CardDescription>
                  {synthesis.synthesis_level} level • 
                  {Math.round(synthesis.result.confidence * 100)}% confidence
                </CardDescription>
              </div>
              <Button
                variant="outline"
                size="sm"
                onClick={downloadSynthesis}
              >
                <Download className="mr-2 h-4 w-4" />
                Download
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="prose prose-sm max-w-none">
              <h3>Synthesis</h3>
              <p className="whitespace-pre-wrap">{synthesis.result.synthesis}</p>
            </div>

            <div>
              <h3 className="font-semibold mb-2">Attributions</h3>
              <div className="space-y-1">
                {synthesis.result.attributions.map((attr: any, idx: number) => (
                  <div key={idx} className="text-sm">
                    <span className="font-medium">{attr.author}</span>: {attr.contribution}
                    <span className="text-muted-foreground"> ({Math.round(attr.weight * 100)}%)</span>
                  </div>
                ))}
              </div>
            </div>

            {synthesis.result.gaps.length > 0 && (
              <div>
                <h3 className="font-semibold mb-2">Identified Gaps</h3>
                <ul className="list-disc list-inside space-y-1">
                  {synthesis.result.gaps.map((gap: any, idx: number) => (
                    <li key={idx} className="text-sm">
                      <span className="font-medium">{gap.topic}</span>: {gap.description}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            <div className="text-xs text-muted-foreground">
              Generated using {synthesis.result.metadata.provider} • 
              {synthesis.result.metadata.tokensUsed} tokens • 
              ${(synthesis.result.metadata.costCents / 100).toFixed(2)} cost
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}